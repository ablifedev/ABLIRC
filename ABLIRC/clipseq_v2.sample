#===================================================================#
#================= Globle config and Genome config =================#
#===================================================================#
[gc]

# Project infomation, for Report front cover
Title = Clip-seq Analyze with ABLIRC
Institutions = Example Lab
Reportdate = 2015-5-20

# If filled 'T', The program only generates commands , but the command is not executed,if filled 'F', the command will be executed immediately after generation.
make-cmd-only = F

# Genome ID used in the analysis, genomeinfo table should be filled. (genomeinfo.xls)
GenomeID = human_gencode_v23

# decide whether to use the sge server for qsub task delivery, if you have installed sge, fill 'yes', the task will be distributed to each node through the qsub, otherwise fill 'no', the task will be running with multi-threaded at a single node.
usesge = yes

# number of CPUs to use, if you choose to use sge, then the number of CPU is the maximum number of threads used.
cpu = 16

# The delivery node, it was needed if 'useage' is yes.
sgequeue = new.q

#======================================================#
#================= Sample information =================#
#======================================================#
[sample]

# fullname of the clipseq data input-dir-path.
indir = /data12/dev/magl/updata_pipeline/ablifedev/clipseq/reads

# choose whether the library was build on strand, fill 'strand' or 'unstrand'
library-type = unstrand

# name the each sample, the naming rules is 'sampleX = sample alias: sample file name'ï¼Œyou must list all you samples in the list, and specify an alias for each of them, all the alias must be different.
SAMPLE1 = Eif3b_1:HEK293_Eif3b_1st.fq
SAMPLE2 = Eif3b_2:HEK293_Eif3b_2nd.fq
SAMPLE3 = IgG_1:HEK293_IgG_1st.fq
SAMPLE4 = IgG_2:HEK293_IgG_2nd.fq

# You must define the groups, normally, the sample and its control sample may be placed in a group. You can list all you samples with many groups, each group will be generated a result of callpeak.
GROUP1 = Eif3b_1:IgG_1
GROUP2 = Eif3b_2:IgG_2

#======================================================#
#======== Modules setting[module:modulename] ==========#
#======================================================#
# The following sections describe the parameter settings for each module



# Clean the raw reads, Remove unqualified reads.
[module:cleanreads]
#The execution order of this module
order = 1
id = clean

#whether skip the module,if is "F" , this module will be executed normal,if is "T", this module will be skipped, even not make a commamd.
skip = F
o:cleanreads_dir
o:rawstat

# Select a part of the reads to test and evaluate the quality of the data.
[module:testreads]
order = 2
id = statics
skip = F
cleanreads_dir = source|clean:cleanreads_dir
rawstat = source|clean:rawstat
o:statics_file

# Analysis of data quality statistics by fastqc.
[module:fastqc]
order = 2
skip = F

# Align sequence to the genome, The mapping tool used is Tophat2, you can set the parameters below.
[module:mapping_tophat2]
id = mapping__tophat2
order = 2
skip = F
# most threads to use.
threads = 5
# Maximum number of mismatches.
readmis = 2
# Maximum number of mismatches to bowtie2.
b2mis = 1
# You can add any tophat or bowtie2 parameters on this line,they will be executed during the Tophat2 running.
other_argv = -a 8 -m 0 -g 2 -p 12 --microexon-search --no-coverage-search --report-secondary-alignments

# The definition of the output files, they are needed by the downstream modules. We recommend that you do not modify them.
o:uniqbam
o:mapresult

# Convert the resulting bam file to a bed file, and remove the duplication results, the output will be used to callpeak.
[module:bam2bed]
id = mapping__bam2bed
order = 3
skip = F
uniqbam = source|mapping__tophat2:uniqbam
o:rmdup_uniq_bam
o:rmdup_uniq_bed

# Statistical information on the different regions of the gene annotation file.
[module:gff]
order = 3
skip = F

# According to the results of mapping, statistics the distribution of regions where reads aligned on the genome.
[module:mapregion]
id = basic__mapregion
order = 3
skip = F
uniqbam = source|mapping__tophat2:uniqbam
mapresult = source|mapping__tophat2:mapresult

# According to the results of mapping, statistics the distribution of the distance between reads and TSS,TTS.
[module:distance2xxx]
id = basic__distance2xxx
order = 3
skip = F
uniqbam = source|mapping__tophat2:uniqbam

# According to the results of mapping, calulate the expression of each genes.
[module:exp]
id = basic__exp
order = 3
skip = F
uniqbam = source|mapping__tophat2:uniqbam

# The basic analysis of the clipseq, the correlation between the individual samples is calculated.
[module:clip_basic]
id = basic__clip_basic
order = 4
skip = F
min_sum_rpkm = 0.3
uniqbam = source|mapping__bam2bed:rmdup_uniq_bam
#raw_pas_bam = source|filter_pas_reads:raw_pas_bam
#o:pas_bam_discardip

# This module is used to callpeak, make sure the module 'mapping_tophat2' has been runned and the output file 'rmdup_uniq_bed' and 'rmdup_uniq_bam' are exist. If you have listed your samples into groups previously, each group would be generated a result of callpeak. Besides, you can compare the difference of the callpeak result between two groups, you just need fill the parameter 'ablife_groupX', notice that the two group was connected with a ':', samples in each group was connected with a "_vs_".
[module:clip_callpeak_ablife]
id = clip_callpeak__ablife
order = 4
skip = F

uniqbed = source|mapping__bam2bed:rmdup_uniq_bed
uniqbam = source|mapping__bam2bed:rmdup_uniq_bam
o:peakfa
o:peakinfo
o:nonoverlap_peaks
o:peakreads
o:peaksense
o:peakantisense


# This module is used to statistics the result of callpeak. Calculate the sense and antisense peaks, compare overlap peaks between different groups.
[module:clip_stat]
id = clip_callpeak__stat
order = 7
skip = F
uniqbam = source|mapping__bam2bed:rmdup_uniq_bam
peakinfo1 = source|clip_callpeak__ablife:peakinfo
peak_nonoverlap1 = source|clip_callpeak__ablife:nonoverlap_peaks
peakreads1 = source|clip_callpeak__ablife:peakreads
peaksense = source|clip_callpeak__ablife:peaksense
peakantisense = source|clip_callpeak__ablife:peakantisense

# Find the motif sequences according to the callpeak result.
[module:clip_findmotifs]
id = clip_callpeak__findmotifs
order = 7
skip = F
peakfa_ablife = source|clip_callpeak__ablife:peakfa

# Plot a diagram by circos, which showing the distribution of the peaks on the genome. 
[module:clip_plot]
id = clip_plot
order = 8
skip = F
uniqbam = source|mapping__bam2bed:rmdup_uniq_bam
peakinfo1 = source|clip_callpeak__ablife:peakinfo

# Generate a report of the result.
[module:clip_report]
id = report
order = 9
skip = F
Clean_INFO = source|statics:statics_file

# Appendix.
Sup0 = Reference_genome
Sup1 = Clean
Sup2 = Quality_control
Sup3 = Mapping
Sup4 = Correlation
Sup5 = Peak_and_peak_gene
Sup6 = Motif_results
